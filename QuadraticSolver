/*******************************************************************************
 * Quadratic_Solver.java
 *
 * Description: The source file of "Everything Quadratics" which is a program to
 * solve and manipulate user-inputted quadratic equations.
 *
 * By Stefan Kussmaul and Matthew Mcmullin
 *******************************************************************************/
import java.util.Vector;

class Quadratic_Solver
{
    public static void main(String[] args) {
          /* set default values */
        boolean calc_vertex = true, calc_yintercept = true, print_table = true,
                calc_sumproduct = true, factor_equation = true, equation_loaded = false;
  /* equation_loaded tells if there is currently an equation entered */
        int[] table_boundaries = {-10, 10};
        double[] equation = new double [3];
        double [] vertex = new double [2];
        double [] solution = new double [2];
        boolean has_solution = false;
        System.out.print("Plain+Simple Quadratic Solver\n");
        System.out.print("        Press enter\n");
        cin.get();
        int menu_input;
        do {
	/* load settings from file */
            LoadSettings(calc_vertex, calc_yintercept, print_table, calc_sumproduct,
                    factor_equation, table_boundaries);
    /* attempt to load last equation used from "quadratics_current" file */
            equation_loaded = GetEquationFromFile("quadratics_current", 1, true, equation, false);
            if(equation_loaded) {
                System.out.print("Current equation loaded: ");
                PrintEquation(equation[0], equation[1], equation[2]);
                System.out.print("\n\n");
            }
            else
                System.out.print("No equation loaded\n\n");
            int line_counter = 1;
            System.out.print("\nAvailable Functions\n");
            System.out.print("---------------------------------\n");
            if(equation_loaded) {
    	/* only display if an equation is loaded and ready for use */
                System.out.print(line_counter + ". Solve Equation\n");
                line_counter++;
                System.out.print(line_counter + ". Factor Equation\n"); /// I'm sure you can figure out a more efficient way to do this
                line_counter++;
                System.out.print(line_counter + ". Analyze Equation\n");
                line_counter++;
            }
            System.out.print(line_counter + ".  Enter New Equation\n");
            line_counter++;
            System.out.print(line_counter + ".  Choose From Equation List\n");
            line_counter++;
            System.out.print(line_counter + ".  Options\n");
            line_counter++;
            System.out.print(line_counter + ". Help\n");
            line_counter++;
            System.out.print(line_counter + ". Quit\n");
            line_counter++;
            System.out.print("---------------------------------\n");
            System.out.print("Enter choice: ");
            cin >> menu_input;
            if(equation_loaded) {
    	/* menu when equation IS loaded */
                do {
                    switch (menu_input) {
                        case 1:
                            CalculateRoots(equation, solution, has_solution, true);
                            break;
                        case 2:
                            System.out.print(Factor(equation, solution));
                            break;
                        case 3:
                            Display(equation, vertex, solution, has_solution, calc_vertex,
                                    calc_yintercept, print_table, calc_sumproduct, factor_equation,
                                    table_boundaries);
                            break;
                        case 4:
                            InputEquation(equation);
                            break;
                        case 5:
                            DisplayEquations(equation);
                            break;
                        case 6:
                            Options(calc_vertex, calc_yintercept, print_table, calc_sumproduct,
                                    factor_equation, table_boundaries);
                            break;
                        case 7:
                            System.out.print("This function has not been created yet\n\n");
                            break;
                        case 8:
                            exit(0);
                            break;
                        default:
                            System.out.print("Please enter a valid number between 1 and 8\n\n");
                            break;
                    }
                }while (menu_input < 1 || menu_input > 8);
            }
            else {
    	/* menu when equation IS NOT loaded */			/// there's a better way to do this
                do{
                    switch(menu_input) {
                        case 1:
                            InputEquation(equation);
                            break;
                        case 2:
                            DisplayEquations(equation);
                            break;
                        case 3:
                            Options(calc_vertex, calc_yintercept, print_table, calc_sumproduct,
                                    factor_equation, table_boundaries);
                            break;
                        case 4:
                            System.out.print("This function has not been created yet\n\n");
                            break;
                        case 5:
                            // exit(0);
                            break;
                        default:
                            System.out.print("Please enter a valid number between 1 and 5\n\n");
                            break;
                    }
                }while(menu_input < 1 || menu_input > 5);
            }
            System.out.print("\n\nHit enter to return to menu "); /// want this to make the program wait until user hits enter
            /// what isn't working? In what way?
            /// this happens when we use a combination of cin, getline, and other stuff. We will have to figure out one to use to standardize everything
            cin.get();
            cin.get(); /* has to be repeated once */
        }
        while (menu_input != 3);
    }
    public static void InputEquation(double equation[]) {
        char choice;
        System.out.print("Equation will be entered in the form ax^2 + bx + c = 0\n\n";
        for (int i = 0; i < 3; i++) {
    /* 97 is the ascii character a, so this goes from a to c in the loop */
            System.out.print("Enter " + (char)(i + 97) + " >> term: ");
            cin >> equation[i];
        }
        ofstream current_equation ("quadratics_current");
        if (current_equation.is_open()) /* write values to file for future use */ {
            current_equation << EquationToString(equation[0], equation[1], equation[2]); /* write equation to file */
            current_equation.close();
        }
        System.out.print("Save equation? (y/n) ");
        cin >> choice;
        if(choice == 'y')
            SaveEquation(equation[0], equation[1], equation[2]);
    }
    public static void CalculateRoots(double equation[], double solution[],
                                      boolean has_solution, boolean print) {
  /* b^2 - 4ac */
        int discriminant = pow(equation[1], 2) - (4 * equation[0] * equation[2]);
        if (discriminant < 0) {
            has_solution = false;
        }
        else {
            has_solution = true;
    /* -b + root b^2 - 4ac / 2a */
            solution[0] = (-equation[1] + sqrt(discriminant)) / (2 * equation[0]);
    /* -b - root b^2 - 4ac / 2a */
            solution[1] = (-equation[1] - sqrt(discriminant)) / (2 * equation[0]);
        }
        if(print) {
            if (!has_solution) {
                System.out.print("Equation has no solutions\n");
            }
            else {
                if (solution[0] == solution[1]) {
                    System.out.print("Root(s): (0," + solution[1] + ")");
                }
                if (solution[0] != solution[1]) {
                    System.out.print(" and (0," + solution[1] + ")");
                }
                System.out.print("\n");
            }
        }
    }
    public static void CalculateVertex(double equation[], double vertex[]) {
        vertex[0] = (-equation[1]) / (2 * equation[0]);
        vertex[1] = PlugIn(vertex[0], equation);
    }
    public static double CalculateYIntercept(double equation[]) {
        return PlugIn(0, equation);
    }
    public static void Options(boolean calc_vertex, boolean calc_yintercept, boolean print_table,
                               boolean calc_sumproduct, boolean factor_equation,
                               int table_boundaries[]) {
        LoadSettings(calc_vertex, calc_yintercept, print_table, calc_sumproduct,
                factor_equation, table_boundaries);
        DisplayOptions(calc_vertex, calc_yintercept, print_table, calc_sumproduct,
                factor_equation, table_boundaries);
        System.out.print("Enter number of choice you would like to change: ");
        int choice = 0;
        do{
            cin >> choice;
            switch (choice) {
                case 1:
                    calc_vertex = !calc_vertex;
                    System.out.print("Calculate Vertex set to + " + booleanToString(calc_vertex) + " >>\n");
                    break;
                case 2:
                    calc_yintercept = ! calc_yintercept;
                    System.out.print("Calculate y-Intercept set to + " + booleanToString(
                            calc_yintercept) + " >>\n");
                    break;
                case 3:
                    print_table = !print_table;
                    System.out.print("Print Table set to + " + booleanToString(print_table) + " >>\n");
                    break;
                case 4:
                    calc_sumproduct = !calc_sumproduct;
                    System.out.print("Calculate Sum and Product set to + " + booleanToString(
                            calc_sumproduct) + " >>\n");
                    break;
                case 5:
                    factor_equation = !factor_equation;
                    System.out.print("Factor Equation set to + " + booleanToString(factor_equation) +
                            " >>\n");
                    break;
                case 6:
                    System.out.print("Enter lower bound: ");
                    cin >> table_boundaries[0];
                    System.out.print("Enter upper bound: ");
                    cin >> table_boundaries[1];
                    System.out.print("New bounds set to (" + table_boundaries[0] + "," +
                            table_boundaries[1] + ")\n");
                    break;
                case 7:
                    break; /* this does nothing so that the thing after the switch case takes it but it doesn't activate the default case */
                default:
                    System.out.print("\nPlease enter a choice between 1 and 7:\n");
                    break;
            }
        } while (choice < 1 || choice > 7);
        String string_settings = "" + booleanToChar(calc_vertex) + booleanToChar(
                calc_yintercept) + booleanToChar(print_table) + booleanToChar(
                calc_sumproduct) + booleanToChar(factor_equation) + to_string(
                table_boundaries[0]) + ',' + to_string(table_boundaries[1]);
        ofstream settings_file("quadratics_settings");
        if (settings_file.is_open()) {
            settings_file << string_settings;
        }
        settings_file.close();
    }
    public static void Table(double equation[], boolean print_table, int table_boundaries[]) { /// needs to be formatted
        System.out.print("   x             f(x)\n");
        for (int i = table_boundaries[0]; i <= table_boundaries[1]; i++) {
            System.out.print("   " + i + "          " + PlugIn(i, equation) + "\n");
        }
    }
    public static void Display(double equation[], double vertex[], double solution[],
                 boolean has_solution, boolean calc_vertex, boolean calc_yintercept, boolean print_table,
                 boolean calc_sumproduct, boolean factor_equation, int table_boundaries[]) {

        System.out.print("\n\n");
        if (calc_vertex) {
            CalculateVertex(equation, vertex);
        }
        if (calc_yintercept) {
            /// ok, it's calculated - now it needs to be stored!
            CalculateYIntercept(equation);
        }
        System.out.print("Equation: ");
        PrintEquation(equation[0], equation[1], equation[2]);
        CalculateRoots(equation, solution, has_solution, true);
        if (calc_sumproduct) {
            System.out.print("Sum of roots = " + solution[0] + solution[1] +
                    "\n");
            System.out.print("Product of roots = " + solution[0] * solution[1] + "\n");
        }
        if (factor_equation) {
            String f = Factor(equation, solution);
            System.out.print(f);
        }
        if (calc_vertex) {
            System.out.print("Vertex: (" + vertex[0] + "," + vertex[1] + ")\n");
        }
        if (calc_yintercept) {
            System.out.print("y-Intercept: (0," + equation[1] + ")\n");
        }
        if (print_table) {
            Table(equation, print_table, table_boundaries);
        }
    }
    public static String Factor(double equation[], double solution[]) { /// why does this return a string?
        /// why not just void, and print it directly?
  /* plug in 1 */
        double equation_factor = PlugIn(1, equation) /
                ((1 - solution[0]) * (1 - solution[1]));
        if (solution[0] != solution[1]) {
            return to_string(equation_factor) +
                    "(x" + GetSign(solution[0]) + to_string(solution[0]) + ")" +
                    "(x" + GetSign(solution[1]) + to_string(solution[1]) + ")";
        } else {
            return to_string(equation_factor) +
                    "(x" + GetSign(solution[0]) + to_string(solution[0]) + ")^2";
        }
    }
    public static String booleanToString(boolean boolean_to_convert) {
        if (boolean_to_convert == true) {
            return "TRUE";
        }
        else {
            return "FALSE";
        }
    }
    public static void LoadSettings(boolean calc_vertex,
                                    boolean calc_yintercept,
                                    boolean print_table,
                                    boolean calc_sumproduct,
                                    boolean factor_equation,
                                    int table_boundaries[]) {
        String line = "", table_lower_bound = "", table_upper_bound = "";
        boolean comma_reached = false;
        ifstream settings_file("quadratics_settings");
        if (settings_file.is_open()) {
            while (getline(settings_file, line)) {
                calc_vertex = CharToboolean(line[0]);
                calc_yintercept = CharToboolean(line[1]);
                print_table = CharToboolean(line[2]);
                calc_sumproduct = CharToboolean(line[3]);
                factor_equation = CharToboolean(line[4]);
                for (int i = 5; i < (int)line.size(); i++) {
                    if (line[i] == ',') {
                        comma_reached = true;
                    }
                    else if (!(comma_reached))
          /* build table_boundaries[0] */
                    {
                        table_lower_bound = table_lower_bound + line[i];
                    }
                    else if (comma_reached)
          /* build table_boundaries[1] */
                    {
                        table_upper_bound = table_upper_bound + line[i];
                    }
                }
                table_boundaries[0] = atoi(table_lower_bound.c_str());
                table_boundaries[1] = atoi(table_upper_bound.c_str());
            }
            settings_file.close();
    /* set default values and write "quadratics_settings" with default values */
        }
        else {
            calc_vertex = true;
            calc_yintercept = true;
            print_table = true;
            calc_sumproduct = true;
            factor_equation = true;
            table_boundaries[0] = -10;
            table_boundaries[1] = 10;
            ofstream settings_file("quadratics_settings");
            if (settings_file.is_open()) {
                settings_file << "11111-10,10";
                settings_file.close();
            }
        }
    }
    public static boolean CharToboolean(char c) {
        if (c == '0') {
            return false;
        }
        else {
            return true;
        }
    }
    public static char booleanToChar(boolean b) {
        if (!(b)) {
            return '0';
        }
        else {
            return '1';
        }
    }
    public static double PlugIn(double x, double equation[]) {
  /* ax^2 + bx + c */
        return (equation[0] * pow(x, 2)) + (equation[1] * x) + (equation[2]);
    }
    public static char GetSign(double input) {
        if (input >= 0) {
            return '+';
        } else {
            return '-';
        }
    }
    public static void DisplayOptions(boolean calc_vertex, boolean calc_yintercept, boolean print_table,
                                      boolean calc_sumproduct, boolean factor_equation, int table_boundaries[]) {
        System.out.print("\n\nSettings: \n");
        System.out.print( "---------------------------------------------\n");
        System.out.print( "1. Calculate Vertex......................." + booleanToString(calc_vertex));
        System.out.print("\n2. Calculate y-Intercept..................");
        System.out.print( booleanToString(calc_yintercept));
        System.out.print("\n3. Calculate Sum and Product..............");
        System.out.print( booleanToString(calc_sumproduct));
        System.out.print("\n4. Factor Equation........................");
        System.out.print( booleanToString(factor_equation));
        System.out.print("\n5. Print Table............................");
        System.out.print( booleanToString(print_table));
        System.out.print( "\n6. Set Table Boundaries...................(");
        System.out.print( table_boundaries[0] + "," + table_boundaries[1] + ")\n");
        System.out.print( "\n7. Back to Main Menu\n");
        System.out.print( "---------------------------------------------\n\n");
    }
    /* saves equation to "quadratics_equations" */
    public static void SaveEquation(double a, double b, double c) {
        String line, string_equation;
        Vector<String> equations = new Vector<String> (0,1);
        ifstream file("quadratics_equations"); /* access file */
        if(file.is_open()) {
            while(getline(file, line)) {
			/* copy in line by line to vector */
                equations.push_back(line);
            }
        }
        ofstream new_file("quadratics_equations"); /* access file again in ofstream */
        if(new_file.is_open()) {
		/* overwrite with original equations */
            for(int i = 0; i < (int)equations.size(); i++)
                new_file << equations[i];
		/* add newest equation to file */
            new_file << EquationToString(a, b, c);
            new_file.close();
        }
    }
    /* Removes chosen equation from "quadratics_equations" */
    public static void RemoveEquationFromList(int line_number) {
        String line;
        int line_counter = 1;
        Vector<String> equations = new Vector<String>(0,1);
        ifstream file("quadratics_equations");
        if(file.is_open()) {
            while(getline(file, line)) {
                if(line_counter != line_number)
                    equations.add(line); /* copy all equations except chosen one
											* to vector */
                line_counter++;
            }
        }
        ofstream write_file("quadratics_equations");
        if(write_file.is_open()) {
            for(int i = 0; i < (int)equations.size(); i++) {
                write_file << equations[i]; /* write equations back into file */
            }
            write_file.close();
        }
    }
    /* Displays equations stored in "quadratics_equations"
 * User can choose to load an equation into equations[] for use in program,
 * or can delete an equation from the file */
    public static void DisplayEquations(double equation[]) {
        String line, a, b, c;
        int line_counter = 1, choice, remove;
        ifstream equations("quadratics_equations");
        if(equations.is_open()) {
            while(getline(equations, line)) {
                GetEquationFromFile("quadratics_equations", line_counter, false, equation, false);
                System.out.print(line_counter + ". ");
//			PrintEquation(equation);
                line_counter++;
            }
            System.out.print(line_counter + ". " + "Delete equation\n");
            System.out.print("Enter choice: ");
            cin >> choice;
            if(choice == line_counter) { /* choice is to delete an equation */
                System.out.print("Enter number of equation to remove: ");
                cin >> remove;
                do {
                    if(remove < 1 || remove > line_counter - 1) {
                        System.out.print("Error: Invalid choice. Please try again: ");
                        cin >> remove;
                    }
                }while(remove < 1 || remove > line_counter -1);
                RemoveEquationFromList(remove);
            }
            else
                GetEquationFromFile("quadratics_equations", choice, 1, equation, false);
        } else
            System.out.print("Error: No saved equations.\n");
    }
    /* Reads "file_name" and finds specified line number. If load = true, this
   function will load information from the line into equations[] for use by the
   user. If print = true, the equation will be printed. */
    /// did you mean equation[] or something else? equations[] doesn't exist
    public static boolean GetEquationFromFile(String file_name, int line_number, boolean load, double equation[], boolean print) {
        String line = "", a ="", b = "", c = "";
        int line_counter = 1;
        boolean file_exists = false;
        ifstream current_equation(file_name.c_str());
        if(current_equation.is_open()) {
            file_exists = true;
            while (getline(current_equation, line)) {
                if(line_counter == line_number) {
                    int first_comma = line.indexOf(','); /* find first comma */
                    int second_comma = line.lastIndexOf(','); /* find second comma */
				/* REMINDER: line.substr() takes in the size of the substring, NOT the
				             ending point as the second parameter (yes, that sucks) */
                    a = line.substring(0, first_comma);
                    b = line.substring(first_comma + 1, second_comma - first_comma);
				/* c starts at the second comma, and the size of c is the size of the
				   whole line minus the size of a, b, and the 2 commas */
                    c = line.substring(second_comma + 1,
                            line.length()  - (a.length() + b.length() + 2));
                }
                line_counter++;
                if(load) { /* "loads" values in to equation[] according to parameter */
                    equation[0] = Double.parseDouble(a);
                    equation[1] = Double.parseDouble(b);
                    equation[2] = Double.parseDouble(c);
                }
                if(print)
                    PrintEquation(equation[0], equation[1], equation[2]);
            }
        }
        return file_exists;
    }
    /* converts numerical values of equation into string form.
* This will be used to write our equations to files */
    public static String EquationToString(double a, double b, double c) {
        /* I've heard that the Double.toString can cause some weird errors, this will need to
        be tested. */
        String equation = Double.toString(a) + ',' + Double.toString(b) + ',' + Double.toString(c);
        return equation;
    }
    /* Prints equation with proper formatting */
    public static void PrintEquation(double a, double b, double c) {
  /* the output will be stored here */
        String equation_output = "";
  /* if the coefficient is 0, nothing happens */
        if (a != 0) {
    /* outputs the coefficient as long as it isn't 1 */
            if (a != 1) {
                equation_output += Double.toString(a);
            }
            equation_output += "x^2";
        }

        if (b != 0) {
    /* outputs the sign of the coefficient */
            equation_output += GetSign(b);
            if (b != 1) {
                equation_output += Double.toString(b);
        }
        equation_output += 'x';
        }
        if (c != 0) {
            equation_output += GetSign(c);
            if (c != 1) {
                equation_output += Double.toString(c);
            }
        }
        equation_output += "=0";
        System.out.print(equation_output + "\n";
    }
    public static void Flipboolean(boolean boolean_to_flip) {
        boolean_to_flip = !boolean_to_flip;
    }
    public static void ClearScreen() {
        System.out.print("\x1b[2J\x1b[H" << flush;
    }
}
